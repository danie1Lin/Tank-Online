// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEgNtc2ci4QIKBUlucHV0EjIKDEVudGl0eVN0YXRl",
            "cxgBIAMoCzIcLm1zZy5JbnB1dC5FbnRpdHlTdGF0ZXNFbnRyeRIlCgtJbnRl",
            "cmFjdGlvbhgCIAMoCzIQLm1zZy5JbnRlcmFjdGlvbhJAChNOZXdFbnRpdHlD",
            "aGFyYWN0ZXJzGAMgAygLMiMubXNnLklucHV0Lk5ld0VudGl0eUNoYXJhY3Rl",
            "cnNFbnRyeRIVCg1EZXN0cm95RW50aXR5GAQgAygDEhEKCVRpbWVTdGFtcBgG",
            "IAEoAxpFChFFbnRpdHlTdGF0ZXNFbnRyeRILCgNrZXkYASABKAMSHwoFdmFs",
            "dWUYAiABKAsyEC5tc2cuRW50aXR5U3RhdGU6AjgBGkoKGE5ld0VudGl0eUNo",
            "YXJhY3RlcnNFbnRyeRILCgNrZXkYASABKAMSHQoFdmFsdWUYAiABKAsyDi5t",
            "c2cuQ2hhcmFjdGVyOgI4ASKfAQoLSW50ZXJhY3Rpb24SFAoMRnJvbUVudGl0",
            "eUlkGAYgASgDEhIKClRvRW50aXR5SWQYASABKAMSDAoEVHlwZRgCIAEoCRIf",
            "CglEaXJlY3Rpb24YAyABKAsyDC5tc2cuVmVjdG9yMxIgCgpBcHBseVBvaW50",
            "GAQgASgLMgwubXNnLlZlY3RvcjMSFQoNSXNSZWJvdW5jYWJsZRgFIAEoCCKi",
            "AQoLRW50aXR5U3RhdGUSDAoEVXVpZBgBIAEoAxIhCglUcmFuc2Zvcm0YAiAB",
            "KAsyDi5tc2cuVHJhbnNmb3JtEhsKBVNwZWVkGAMgASgLMgwubXNnLlZlY3Rv",
            "cjMSIQoJQW5pbWF0aW9uGAggASgLMg4ubXNnLkFuaW1hdGlvbhISCgpQcmVm",
            "YWJOYW1lGAUgASgJEg4KBkhlYWx0aBgGIAEoAiLkAgoJR2FtZUZyYW1lEjYK",
            "DEVudGl0eVN0YXRlcxgBIAMoCzIgLm1zZy5HYW1lRnJhbWUuRW50aXR5U3Rh",
            "dGVzRW50cnkSJQoLSW50ZXJhY3Rpb24YAiADKAsyEC5tc2cuSW50ZXJhY3Rp",
            "b24SMgoKQ2hhcmFjdGVycxgDIAMoCzIeLm1zZy5HYW1lRnJhbWUuQ2hhcmFj",
            "dGVyc0VudHJ5EhUKDURlc3Ryb3lFbnRpdHkYBiADKAMSEQoJVGltZVN0YW1w",
            "GAQgASgDEhAKCFJ1bm5pZ05vGAUgASgDGkUKEUVudGl0eVN0YXRlc0VudHJ5",
            "EgsKA2tleRgBIAEoAxIfCgV2YWx1ZRgCIAEoCzIQLm1zZy5FbnRpdHlTdGF0",
            "ZToCOAEaQQoPQ2hhcmFjdGVyc0VudHJ5EgsKA2tleRgBIAEoAxIdCgV2YWx1",
            "ZRgCIAEoCzIOLm1zZy5DaGFyYWN0ZXI6AjgBIigKCUFuaW1hdGlvbhIMCgRO",
            "YW1lGAEgASgJEg0KBVZhbHVlGAIgASgCIk4KCVRyYW5zZm9ybRIeCghQb3Np",
            "dGlvbhgBIAEoCzIMLm1zZy5WZWN0b3IzEiEKCFJvdGF0aW9uGAIgASgLMg8u",
            "bXNnLlF1YXRlcm5pb24iXgoMU2Vzc2lvbkNhY2hlEicKDkdhbWVTZXJ2ZXJJ",
            "bmZvGAEgASgLMg8ubXNnLlNlcnZlckluZm8SJQoLU2Vzc2lvbkluZm8YAiAB",
            "KAsyEC5tc2cuU2Vzc2lvbkluZm8iKgoHVmVjdG9yMxIJCgFYGAEgASgCEgkK",
            "AVkYAiABKAISCQoBWhgDIAEoAiI4CgpRdWF0ZXJuaW9uEgkKAVgYASABKAIS",
            "CQoBWRgCIAEoAhIJCgFaGAMgASgCEgkKAVcYBCABKAIihwEKCFBvc2l0aW9u",
            "EikKBlBvc01hcBgBIAMoCzIZLm1zZy5Qb3NpdGlvbi5Qb3NNYXBFbnRyeRIR",
            "CglUaW1lU3RhbXAYAiABKAMaPQoLUG9zTWFwRW50cnkSCwoDa2V5GAEgASgD",
            "Eh0KBXZhbHVlGAIgASgLMg4ubXNnLlRyYW5zZm9ybToCOAEiSgoFRXJyb3IS",
            "DwoHRXJyVHlwZRgBIAEoCRIOCgZFcnJNc2cYAiABKAkSEAoIUnVubmlnTm8Y",
            "AyABKAkSDgoGRnJvbUlkGAQgASgDIhoKCVRpbWVTdGFtcBINCgVWYWx1ZRgB",
            "IAEoAyITCgJJRBINCgVWYWx1ZRgBIAEoAyJuCg1NZXNzYWdlVG9Vc2VyEigK",
            "B01zZ1R5cGUYASABKA4yFy5tc2cuTWVzc2FnZVRvVXNlci5UeXBlEg8KB0Nv",
            "bnRleHQYAiABKAkiIgoEVHlwZRIKCgZUb1ZpZXcQABIOCgpUb0RlYnVnTG9n",
            "EAIieQoKTG9nTWVzc2FnZRInCghMb2dMZXZlbBgBIAEoDjIVLm1zZy5Mb2dN",
            "ZXNzYWdlLkxldmVsEg8KB0NvbnRleHQYAiABKAkiMQoFTGV2ZWwSCQoFRGVi",
            "dWcQABIICgRJbmZvEAESCAoEV2FybhACEgkKBUZhdGFsEAMiMQoNRnJpZW5k",
            "UmVxdWVzdBIOCgZVc2VySWQYASABKAMSEAoIVXNlck5hbWUYAiABKAkiHgoN",
            "U2VhcmNoS2V5V29yZBINCgVWYWx1ZRgBIAEoCSIrCgxTZWFyY2hSZXN1bHQS",
            "GwoETGlzdBgBIAMoCzINLm1zZy5Vc2VySW5mbyIsCghVc2VyTGlzdBIgCgl1",
            "c2VySW5mb3MYASADKAsyDS5tc2cuVXNlckluZm8icgoMR2FtZUNyZWF0aW9u",
            "Eh8KCFJvb21JbmZvGAEgASgLMg0ubXNnLlJvb21JbmZvEigKDlBsYXllclNl",
            "c3Npb25zGAIgAygLMhAubXNnLlNlc3Npb25JbmZvEhcKD01hc3RlclNlc3Np",
            "b25JZBgDIAEoAyIiCgZQZW1LZXkSCwoDVExTGAEgASgJEgsKA1NTTBgCIAEo",
            "CSIHCgVFbXB0eSIRCg9Sb29tUHJlcGFyZVZpZXcikwEKCkVudGl0eUluZm8S",
            "DAoEVXVpZBgBIAEoAxIOCgZUZWFtTm8YBCABKAUSIQoJVHJhbnNmb3JtGAIg",
            "ASgLMg4ubXNnLlRyYW5zZm9ybRITCgtDaGFyYWN0ZXJJZBgDIAEoAxIfCgtB",
            "Y3RpdmVTa2lsbBgFIAEoCzIKLm1zZy5Ta2lsbBIOCgZNb3Rpb24YBiABKAki",
            "NAoFU2tpbGwSDgoGQWN0aXZlGAEgASgIEgwKBE5hbWUYAiABKAkSDQoFVmFs",
            "dWUYAyABKAIiCgoISG9tZVZpZXciQAoLUm9vbVNldHRpbmcSEQoJTWF4UGxh",
            "eWVyGAEgASgFEhAKCEdhbWVUeXBlGAIgASgJEgwKBE5hbWUYAyABKAkiKQoI",
            "Um9vbUxpc3QSHQoEaXRlbRgBIAMoCzIPLm1zZy5Sb29tUmV2aWV3Ip4DCghS",
            "b29tSW5mbxIMCgRVdWlkGAEgASgDEgwKBE5hbWUYAiABKAkSEAoIR2FtZVR5",
            "cGUYAyABKAkSEQoJT3duZXJVdWlkGAQgASgDEjEKClVzZXJJblJvb20YBSAD",
            "KAsyHS5tc2cuUm9vbUluZm8uVXNlckluUm9vbUVudHJ5Ei8KCVJlYWR5VXNl",
            "chgGIAMoCzIcLm1zZy5Sb29tSW5mby5SZWFkeVVzZXJFbnRyeRIoCgZTdGF0",
            "dXMYByABKA4yGC5tc2cuUm9vbUluZm8uUm9vbVN0YXR1cxIXCg9MZWZ0TWls",
            "bGlTZWNvbmQYCCABKAMaQAoPVXNlckluUm9vbUVudHJ5EgsKA2tleRgBIAEo",
            "AxIcCgV2YWx1ZRgCIAEoCzINLm1zZy5Vc2VySW5mbzoCOAEaMAoOUmVhZHlV",
            "c2VyRW50cnkSCwoDa2V5GAEgASgDEg0KBXZhbHVlGAIgASgIOgI4ASI2CgpS",
            "b29tU3RhdHVzEg0KCVByZXBhcmluZxAAEg0KCU9uUGxheWluZxABEgoKBkVu",
            "ZGluZxACImMKClJvb21SZXZpZXcSDAoEVXVpZBgBIAEoAxIMCgROYW1lGAIg",
            "ASgJEhAKCEdhbWVUeXBlGAMgASgJEhEKCU1heFBsYXllchgEIAEoBRIUCgxJ",
            "blJvb21QbGF5ZXIYBSABKAUijAEKC1Jvb21Db250ZW50EgwKBFV1aWQYASAB",
            "KAMSLgoHUGxheWVycxgCIAMoCzIdLm1zZy5Sb29tQ29udGVudC5QbGF5ZXJz",
            "RW50cnkaPwoMUGxheWVyc0VudHJ5EgsKA2tleRgBIAEoCRIeCgV2YWx1ZRgC",
            "IAEoCzIPLm1zZy5QbGF5ZXJJbmZvOgI4ASKJAQoKUGxheWVySW5mbxIVCg1D",
            "aGFyYWN0ZXJDb2RlGAEgASgDEg4KBlRlYW1ObxgCIAEoBRIhCglDaGFyYWN0",
            "ZXIYBCABKAsyDi5tc2cuQ2hhcmFjdGVyEg4KBlVzZXJJZBgFIAEoAxIQCghV",
            "c2VyTmFtZRgGIAEoCRIPCgdJc1JlYWR5GAcgASgIIqACCglDaGFyYWN0ZXIS",
            "DAoEVXVpZBgBIAEoAxIVCg1DaGFyYWN0ZXJUeXBlGAIgASgJEgwKBE5hbWUY",
            "AyABKAkSGQoFQ29sb3IYBCABKAsyCi5tc2cuQ29sb3ISDQoFTGV2ZWwYBSAB",
            "KAUSCwoDRXhwGAYgASgFEhEKCU1heEhlYWx0aBgKIAEoAhIdCgdBYmlsaXR5",
            "GAcgASgLMgwubXNnLkFiaWxpdHkSIgoKRXF1aXBtZW50cxgIIAMoCzIOLm1z",
            "Zy5FcXVpcG1lbnQSJgoEQXR0chgJIAMoCzIYLm1zZy5DaGFyYWN0ZXIuQXR0",
            "ckVudHJ5GisKCUF0dHJFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAI6AjgBIsEDCgtTZXNzaW9uSW5mbxIsCgVTdGF0ZRgBIAEoDjIdLm1zZy5T",
            "ZXNzaW9uSW5mby5TZXNzaW9uU3RhdGUSMgoIQ2FwYWNpdHkYAiABKA4yIC5t",
            "c2cuU2Vzc2lvbkluZm8uU2Vzc2lvbkNhcGFjaXR5EgwKBFV1aWQYBSABKAMS",
            "HAoDS2V5GAMgASgLMg8ubXNnLlNlc3Npb25LZXkSHwoIVXNlckluZm8YBCAB",
            "KAsyDS5tc2cuVXNlckluZm8ivQEKDFNlc3Npb25TdGF0ZRINCglOb1Nlc3Np",
            "b24QABIJCgVHdWVzdBABEgwKCFVzZXJJZGxlEAISDgoKVXNlckluUm9vbRAD",
            "EhIKDkNvbm5lY3RpbmdHYW1lEAQSHAoYQWdlbnRTZXJ2ZXJXYWl0UmVjb25u",
            "ZWN0EAUSCwoHT25TdGFydBAGEgsKB1BsYXlpbmcQBxIMCghHYW1lT3ZlchAI",
            "EhsKF0dhbWVTZXJ2ZXJXYWl0UmVjb25uZWN0EAkiQwoPU2Vzc2lvbkNhcGFj",
            "aXR5EgYKAkdNEAASDgoKUm9vbU1hc3RlchABEg4KClJvb21DbGllbnQQAhII",
            "CgROb25lEAMiFQoHU3VjY2VzcxIKCgJvaxgBIAEoCCI5CgtBdHRyU2V0dGlu",
            "ZxIOCgZNZXRob2QYASABKAkSCwoDS2V5GAIgASgJEg0KBVZhbHVlGAMgASgJ",
            "IhsKClNlc3Npb25LZXkSDQoFVmFsdWUYASABKAki1QEKClNlcnZlckluZm8S",
            "KAoKU2VydmVyVHlwZRgBIAEoDjIULm1zZy5TZXJ2ZXJJbmZvLlR5cGUSEQoJ",
            "UHVibGljS2V5GAIgASgJEgwKBFBvcnQYAyABKAkSDAoEQWRkchgEIAEoCRIj",
            "CgpTZXNzaW9uS2V5GAUgASgLMg8ubXNnLlNlc3Npb25LZXkSDwoHTWF4Q29u",
            "bhgGIAEoAxIPCgdOb3dDb25uGAcgASgDIicKBFR5cGUSDgoKR2FtZVNlcnZl",
            "chAAEg8KC0FnZW50U2VydmVyEAEiLAoKTG9naW5JbnB1dBIQCghVc2VyTmFt",
            "ZRgBIAEoCRIMCgRQc3dkGAIgASgJIjwKC1JlZ2lzdElucHV0EhAKCFVzZXJO",
            "YW1lGAEgASgJEgwKBFBzd2QYAiABKAkSDQoFRW1haWwYAyABKAkivQEKCFVz",
            "ZXJJbmZvEhAKCFVzZXJOYW1lGAEgASgJEgwKBFV1aWQYAiABKAMSNQoMT3du",
            "Q2hhcmFjdGVyGAMgAygLMh8ubXNnLlVzZXJJbmZvLk93bkNoYXJhY3RlckVu",
            "dHJ5EhUKDVVzZWRDaGFyYWN0ZXIYBCABKAMaQwoRT3duQ2hhcmFjdGVyRW50",
            "cnkSCwoDa2V5GAEgASgDEh0KBXZhbHVlGAIgASgLMg4ubXNnLkNoYXJhY3Rl",
            "cjoCOAEiegoJVXNlclN0YXRlEigKBVN0YXRlGAEgASgOMhkubXNnLlVzZXJT",
            "dGF0ZS5Vc2VyU3RhdHVzIkMKClVzZXJTdGF0dXMSDgoKT25DcmVhdGluZxAA",
            "EgkKBUxvZ2luEAESCwoHT2ZmbGluZRACEg0KCU9uUGxheWluZxADIl8KEENo",
            "YXJhY3RlclNldHRpbmcSDAoEVXVpZBgBIAEoAxIZCgVDb2xvchgCIAEoCzIK",
            "Lm1zZy5Db2xvchIiCgpFcXVpcG1lbnRzGAggAygLMg4ubXNnLkVxdWlwbWVu",
            "dCIoCgVDb2xvchIJCgFSGAEgASgFEgkKAUcYAiABKAUSCQoBQhgDIAEoBSKf",
            "AQoJRXF1aXBtZW50EgwKBE5hbWUYASABKAkSDAoEVHlwZRgCIAEoCRIMCgRV",
            "dWlkGAMgASgDEhoKBkNvbG9ycxgEIAMoCzIKLm1zZy5Db2xvchIdCgdBYmls",
            "aXR5GAUgASgLMgwubXNnLkFiaWxpdHkSCgoCQ0QYBiABKAUSDgoGVXNhYmxl",
            "GAcgASgFEhEKCUludmVudG9yeRgIIAEoBSJYCgdBYmlsaXR5EgsKA0FUSxgB",
            "IAEoBRILCgNERUYYAiABKAUSCwoDU1BEGAMgASgCEgwKBFRTUEQYBiABKAIS",
            "CgoCTVAYBCABKAUSDAoETUFLVBgFIAEoBTLOAQoMQ2xpZW50VG9HYW1lEikK",
            "C1BsYXllcklucHV0EgoubXNnLklucHV0GgoubXNnLkVtcHR5IgAoARIxCg9V",
            "cGRhdGVHYW1lRnJhbWUSCi5tc2cuRW1wdHkaDi5tc2cuR2FtZUZyYW1lIgAw",
            "ARIxCgRQaXBlEg8ubXNnLkxvZ01lc3NhZ2UaEi5tc2cuTWVzc2FnZVRvVXNl",
            "ciIAKAEwARItCg1UaW1lQ2FsaWJyYXRlEgoubXNnLkVtcHR5Gg4ubXNnLlRp",
            "bWVTdGFtcCIAMkEKC0FnZW50VG9HYW1lEjIKDkFxdWlyZUdhbWVSb29tEhEu",
            "bXNnLkdhbWVDcmVhdGlvbhoLLm1zZy5QZW1LZXkiADKWBgoNQ2xpZW50VG9B",
            "Z2VudBIxChBBcXVpcmVTZXNzaW9uS2V5EgoubXNnLkVtcHR5Gg8ubXNnLlNl",
            "c3Npb25LZXkiABIxChBBcXVpcmVPdGhlckFnZW50EgoubXNnLkVtcHR5Gg8u",
            "bXNnLlNlcnZlckluZm8iABIyCg9HZXRTZXNzaW9uQ2FjaGUSCi5tc2cuRW1w",
            "dHkaES5tc2cuU2Vzc2lvbkNhY2hlIgASKQoFTG9naW4SDy5tc2cuTG9naW5J",
            "bnB1dBoNLm1zZy5Vc2VySW5mbyIAEi8KDUNyZWF0ZUFjY291bnQSEC5tc2cu",
            "UmVnaXN0SW5wdXQaCi5tc2cuRXJyb3IiABIuCgpTZXRBY2NvdW50EhAubXNn",
            "LkF0dHJTZXR0aW5nGgwubXNnLlN1Y2Nlc3MiABI1CgxTZXRDaGFyYWN0ZXIS",
            "FS5tc2cuQ2hhcmFjdGVyU2V0dGluZxoMLm1zZy5TdWNjZXNzIgASMQoQQXF1",
            "aXJlR2FtZVNlcnZlchIKLm1zZy5FbXB0eRoPLm1zZy5TZXJ2ZXJJbmZvIgAS",
            "LgoKQ3JlYXRlUm9vbRIQLm1zZy5Sb29tU2V0dGluZxoMLm1zZy5TdWNjZXNz",
            "IgASIwoISm9pblJvb20SBy5tc2cuSUQaDC5tc2cuU3VjY2VzcyIAEicKCVJv",
            "b21SZWFkeRIKLm1zZy5FbXB0eRoMLm1zZy5TdWNjZXNzIgASNQoRVXBkYXRl",
            "Um9vbUNvbnRlbnQSCi5tc2cuRW1wdHkaEC5tc2cuUm9vbUNvbnRlbnQiADAB",
            "EisKClVwZGF0ZUhvbWUSCi5tc2cuRW1wdHkaDS5tc2cuSG9tZVZpZXciADAB",
            "Ei8KDlVwZGF0ZVJvb21MaXN0EgoubXNnLkVtcHR5Gg0ubXNnLlJvb21MaXN0",
            "IgAwARIvCg5VcGRhdGVVc2VyTGlzdBIKLm1zZy5FbXB0eRoNLm1zZy5Vc2Vy",
            "TGlzdCIAMAESMQoEUGlwZRIPLm1zZy5Mb2dNZXNzYWdlGhIubXNnLk1lc3Nh",
            "Z2VUb1VzZXIiACgBMAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Input), global::Msg.Input.Parser, new[]{ "EntityStates", "Interaction", "NewEntityCharacters", "DestroyEntity", "TimeStamp" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Interaction), global::Msg.Interaction.Parser, new[]{ "FromEntityId", "ToEntityId", "Type", "Direction", "ApplyPoint", "IsRebouncable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.EntityState), global::Msg.EntityState.Parser, new[]{ "Uuid", "Transform", "Speed", "Animation", "PrefabName", "Health" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GameFrame), global::Msg.GameFrame.Parser, new[]{ "EntityStates", "Interaction", "Characters", "DestroyEntity", "TimeStamp", "RunnigNo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Animation), global::Msg.Animation.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Transform), global::Msg.Transform.Parser, new[]{ "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SessionCache), global::Msg.SessionCache.Parser, new[]{ "GameServerInfo", "SessionInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Vector3), global::Msg.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Quaternion), global::Msg.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Position), global::Msg.Position.Parser, new[]{ "PosMap", "TimeStamp" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Error), global::Msg.Error.Parser, new[]{ "ErrType", "ErrMsg", "RunnigNo", "FromId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.TimeStamp), global::Msg.TimeStamp.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ID), global::Msg.ID.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.MessageToUser), global::Msg.MessageToUser.Parser, new[]{ "MsgType", "Context" }, null, new[]{ typeof(global::Msg.MessageToUser.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LogMessage), global::Msg.LogMessage.Parser, new[]{ "LogLevel", "Context" }, null, new[]{ typeof(global::Msg.LogMessage.Types.Level) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.FriendRequest), global::Msg.FriendRequest.Parser, new[]{ "UserId", "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SearchKeyWord), global::Msg.SearchKeyWord.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SearchResult), global::Msg.SearchResult.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.UserList), global::Msg.UserList.Parser, new[]{ "UserInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.GameCreation), global::Msg.GameCreation.Parser, new[]{ "RoomInfo", "PlayerSessions", "MasterSessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.PemKey), global::Msg.PemKey.Parser, new[]{ "TLS", "SSL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Empty), global::Msg.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomPrepareView), global::Msg.RoomPrepareView.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.EntityInfo), global::Msg.EntityInfo.Parser, new[]{ "Uuid", "TeamNo", "Transform", "CharacterId", "ActiveSkill", "Motion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Skill), global::Msg.Skill.Parser, new[]{ "Active", "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.HomeView), global::Msg.HomeView.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomSetting), global::Msg.RoomSetting.Parser, new[]{ "MaxPlayer", "GameType", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomList), global::Msg.RoomList.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomInfo), global::Msg.RoomInfo.Parser, new[]{ "Uuid", "Name", "GameType", "OwnerUuid", "UserInRoom", "ReadyUser", "Status", "LeftMilliSecond" }, null, new[]{ typeof(global::Msg.RoomInfo.Types.RoomStatus) }, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomReview), global::Msg.RoomReview.Parser, new[]{ "Uuid", "Name", "GameType", "MaxPlayer", "InRoomPlayer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomContent), global::Msg.RoomContent.Parser, new[]{ "Uuid", "Players" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.PlayerInfo), global::Msg.PlayerInfo.Parser, new[]{ "CharacterCode", "TeamNo", "Character", "UserId", "UserName", "IsReady" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Character), global::Msg.Character.Parser, new[]{ "Uuid", "CharacterType", "Name", "Color", "Level", "Exp", "MaxHealth", "Ability", "Equipments", "Attr" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SessionInfo), global::Msg.SessionInfo.Parser, new[]{ "State", "Capacity", "Uuid", "Key", "UserInfo" }, null, new[]{ typeof(global::Msg.SessionInfo.Types.SessionState), typeof(global::Msg.SessionInfo.Types.SessionCapacity) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Success), global::Msg.Success.Parser, new[]{ "Ok" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.AttrSetting), global::Msg.AttrSetting.Parser, new[]{ "Method", "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.SessionKey), global::Msg.SessionKey.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ServerInfo), global::Msg.ServerInfo.Parser, new[]{ "ServerType", "PublicKey", "Port", "Addr", "SessionKey", "MaxConn", "NowConn" }, null, new[]{ typeof(global::Msg.ServerInfo.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LoginInput), global::Msg.LoginInput.Parser, new[]{ "UserName", "Pswd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RegistInput), global::Msg.RegistInput.Parser, new[]{ "UserName", "Pswd", "Email" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.UserInfo), global::Msg.UserInfo.Parser, new[]{ "UserName", "Uuid", "OwnCharacter", "UsedCharacter" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.UserState), global::Msg.UserState.Parser, new[]{ "State" }, null, new[]{ typeof(global::Msg.UserState.Types.UserStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CharacterSetting), global::Msg.CharacterSetting.Parser, new[]{ "Uuid", "Color", "Equipments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Color), global::Msg.Color.Parser, new[]{ "R", "G", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Equipment), global::Msg.Equipment.Parser, new[]{ "Name", "Type", "Uuid", "Colors", "Ability", "CD", "Usable", "Inventory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Ability), global::Msg.Ability.Parser, new[]{ "ATK", "DEF", "SPD", "TSPD", "MP", "MAKT" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Input : pb::IMessage<Input> {
    private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Input> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input(Input other) : this() {
      entityStates_ = other.entityStates_.Clone();
      interaction_ = other.interaction_.Clone();
      newEntityCharacters_ = other.newEntityCharacters_.Clone();
      destroyEntity_ = other.destroyEntity_.Clone();
      timeStamp_ = other.timeStamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Input Clone() {
      return new Input(this);
    }

    /// <summary>Field number for the "EntityStates" field.</summary>
    public const int EntityStatesFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Msg.EntityState>.Codec _map_entityStates_codec
        = new pbc::MapField<long, global::Msg.EntityState>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.EntityState.Parser), 10);
    private readonly pbc::MapField<long, global::Msg.EntityState> entityStates_ = new pbc::MapField<long, global::Msg.EntityState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.EntityState> EntityStates {
      get { return entityStates_; }
    }

    /// <summary>Field number for the "Interaction" field.</summary>
    public const int InteractionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.Interaction> _repeated_interaction_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.Interaction.Parser);
    private readonly pbc::RepeatedField<global::Msg.Interaction> interaction_ = new pbc::RepeatedField<global::Msg.Interaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.Interaction> Interaction {
      get { return interaction_; }
    }

    /// <summary>Field number for the "NewEntityCharacters" field.</summary>
    public const int NewEntityCharactersFieldNumber = 3;
    private static readonly pbc::MapField<long, global::Msg.Character>.Codec _map_newEntityCharacters_codec
        = new pbc::MapField<long, global::Msg.Character>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.Character.Parser), 26);
    private readonly pbc::MapField<long, global::Msg.Character> newEntityCharacters_ = new pbc::MapField<long, global::Msg.Character>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.Character> NewEntityCharacters {
      get { return newEntityCharacters_; }
    }

    /// <summary>Field number for the "DestroyEntity" field.</summary>
    public const int DestroyEntityFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_destroyEntity_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> destroyEntity_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> DestroyEntity {
      get { return destroyEntity_; }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Input);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Input other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EntityStates.Equals(other.EntityStates)) return false;
      if(!interaction_.Equals(other.interaction_)) return false;
      if (!NewEntityCharacters.Equals(other.NewEntityCharacters)) return false;
      if(!destroyEntity_.Equals(other.destroyEntity_)) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EntityStates.GetHashCode();
      hash ^= interaction_.GetHashCode();
      hash ^= NewEntityCharacters.GetHashCode();
      hash ^= destroyEntity_.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entityStates_.WriteTo(output, _map_entityStates_codec);
      interaction_.WriteTo(output, _repeated_interaction_codec);
      newEntityCharacters_.WriteTo(output, _map_newEntityCharacters_codec);
      destroyEntity_.WriteTo(output, _repeated_destroyEntity_codec);
      if (TimeStamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TimeStamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entityStates_.CalculateSize(_map_entityStates_codec);
      size += interaction_.CalculateSize(_repeated_interaction_codec);
      size += newEntityCharacters_.CalculateSize(_map_newEntityCharacters_codec);
      size += destroyEntity_.CalculateSize(_repeated_destroyEntity_codec);
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Input other) {
      if (other == null) {
        return;
      }
      entityStates_.Add(other.entityStates_);
      interaction_.Add(other.interaction_);
      newEntityCharacters_.Add(other.newEntityCharacters_);
      destroyEntity_.Add(other.destroyEntity_);
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entityStates_.AddEntriesFrom(input, _map_entityStates_codec);
            break;
          }
          case 18: {
            interaction_.AddEntriesFrom(input, _repeated_interaction_codec);
            break;
          }
          case 26: {
            newEntityCharacters_.AddEntriesFrom(input, _map_newEntityCharacters_codec);
            break;
          }
          case 34:
          case 32: {
            destroyEntity_.AddEntriesFrom(input, _repeated_destroyEntity_codec);
            break;
          }
          case 48: {
            TimeStamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Interaction : pb::IMessage<Interaction> {
    private static readonly pb::MessageParser<Interaction> _parser = new pb::MessageParser<Interaction>(() => new Interaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Interaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interaction(Interaction other) : this() {
      fromEntityId_ = other.fromEntityId_;
      toEntityId_ = other.toEntityId_;
      type_ = other.type_;
      Direction = other.direction_ != null ? other.Direction.Clone() : null;
      ApplyPoint = other.applyPoint_ != null ? other.ApplyPoint.Clone() : null;
      isRebouncable_ = other.isRebouncable_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Interaction Clone() {
      return new Interaction(this);
    }

    /// <summary>Field number for the "FromEntityId" field.</summary>
    public const int FromEntityIdFieldNumber = 6;
    private long fromEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromEntityId {
      get { return fromEntityId_; }
      set {
        fromEntityId_ = value;
      }
    }

    /// <summary>Field number for the "ToEntityId" field.</summary>
    public const int ToEntityIdFieldNumber = 1;
    private long toEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToEntityId {
      get { return toEntityId_; }
      set {
        toEntityId_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// Force Harm Torque Use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::Msg.Vector3 direction_;
    /// <summary>
    /// if is scalar then only X has value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "ApplyPoint" field.</summary>
    public const int ApplyPointFieldNumber = 4;
    private global::Msg.Vector3 applyPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3 ApplyPoint {
      get { return applyPoint_; }
      set {
        applyPoint_ = value;
      }
    }

    /// <summary>Field number for the "IsRebouncable" field.</summary>
    public const int IsRebouncableFieldNumber = 5;
    private bool isRebouncable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRebouncable {
      get { return isRebouncable_; }
      set {
        isRebouncable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Interaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Interaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromEntityId != other.FromEntityId) return false;
      if (ToEntityId != other.ToEntityId) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!object.Equals(ApplyPoint, other.ApplyPoint)) return false;
      if (IsRebouncable != other.IsRebouncable) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromEntityId != 0L) hash ^= FromEntityId.GetHashCode();
      if (ToEntityId != 0L) hash ^= ToEntityId.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (applyPoint_ != null) hash ^= ApplyPoint.GetHashCode();
      if (IsRebouncable != false) hash ^= IsRebouncable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ToEntityId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ToEntityId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (direction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Direction);
      }
      if (applyPoint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ApplyPoint);
      }
      if (IsRebouncable != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRebouncable);
      }
      if (FromEntityId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(FromEntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromEntityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromEntityId);
      }
      if (ToEntityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ToEntityId);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (applyPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplyPoint);
      }
      if (IsRebouncable != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Interaction other) {
      if (other == null) {
        return;
      }
      if (other.FromEntityId != 0L) {
        FromEntityId = other.FromEntityId;
      }
      if (other.ToEntityId != 0L) {
        ToEntityId = other.ToEntityId;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::Msg.Vector3();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.applyPoint_ != null) {
        if (applyPoint_ == null) {
          applyPoint_ = new global::Msg.Vector3();
        }
        ApplyPoint.MergeFrom(other.ApplyPoint);
      }
      if (other.IsRebouncable != false) {
        IsRebouncable = other.IsRebouncable;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ToEntityId = input.ReadInt64();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            if (direction_ == null) {
              direction_ = new global::Msg.Vector3();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 34: {
            if (applyPoint_ == null) {
              applyPoint_ = new global::Msg.Vector3();
            }
            input.ReadMessage(applyPoint_);
            break;
          }
          case 40: {
            IsRebouncable = input.ReadBool();
            break;
          }
          case 48: {
            FromEntityId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityState : pb::IMessage<EntityState> {
    private static readonly pb::MessageParser<EntityState> _parser = new pb::MessageParser<EntityState>(() => new EntityState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState(EntityState other) : this() {
      uuid_ = other.uuid_;
      Transform = other.transform_ != null ? other.Transform.Clone() : null;
      Speed = other.speed_ != null ? other.Speed.Clone() : null;
      Animation = other.animation_ != null ? other.Animation.Clone() : null;
      prefabName_ = other.prefabName_;
      health_ = other.health_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityState Clone() {
      return new EntityState(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Transform" field.</summary>
    public const int TransformFieldNumber = 2;
    private global::Msg.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private global::Msg.Vector3 speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3 Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Animation" field.</summary>
    public const int AnimationFieldNumber = 8;
    private global::Msg.Animation animation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Animation Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "PrefabName" field.</summary>
    public const int PrefabNameFieldNumber = 5;
    private string prefabName_ = "";
    /// <summary>
    /// Obj Player Obstacle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrefabName {
      get { return prefabName_; }
      set {
        prefabName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Health" field.</summary>
    public const int HealthFieldNumber = 6;
    private float health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(Animation, other.Animation)) return false;
      if (PrefabName != other.PrefabName) return false;
      if (Health != other.Health) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (speed_ != null) hash ^= Speed.GetHashCode();
      if (animation_ != null) hash ^= Animation.GetHashCode();
      if (PrefabName.Length != 0) hash ^= PrefabName.GetHashCode();
      if (Health != 0F) hash ^= Health.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (transform_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transform);
      }
      if (speed_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Speed);
      }
      if (PrefabName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PrefabName);
      }
      if (Health != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Health);
      }
      if (animation_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Animation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (speed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speed);
      }
      if (animation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animation);
      }
      if (PrefabName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrefabName);
      }
      if (Health != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityState other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Msg.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.speed_ != null) {
        if (speed_ == null) {
          speed_ = new global::Msg.Vector3();
        }
        Speed.MergeFrom(other.Speed);
      }
      if (other.animation_ != null) {
        if (animation_ == null) {
          animation_ = new global::Msg.Animation();
        }
        Animation.MergeFrom(other.Animation);
      }
      if (other.PrefabName.Length != 0) {
        PrefabName = other.PrefabName;
      }
      if (other.Health != 0F) {
        Health = other.Health;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            if (transform_ == null) {
              transform_ = new global::Msg.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
          case 26: {
            if (speed_ == null) {
              speed_ = new global::Msg.Vector3();
            }
            input.ReadMessage(speed_);
            break;
          }
          case 42: {
            PrefabName = input.ReadString();
            break;
          }
          case 53: {
            Health = input.ReadFloat();
            break;
          }
          case 66: {
            if (animation_ == null) {
              animation_ = new global::Msg.Animation();
            }
            input.ReadMessage(animation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameFrame : pb::IMessage<GameFrame> {
    private static readonly pb::MessageParser<GameFrame> _parser = new pb::MessageParser<GameFrame>(() => new GameFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFrame(GameFrame other) : this() {
      entityStates_ = other.entityStates_.Clone();
      interaction_ = other.interaction_.Clone();
      characters_ = other.characters_.Clone();
      destroyEntity_ = other.destroyEntity_.Clone();
      timeStamp_ = other.timeStamp_;
      runnigNo_ = other.runnigNo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameFrame Clone() {
      return new GameFrame(this);
    }

    /// <summary>Field number for the "EntityStates" field.</summary>
    public const int EntityStatesFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Msg.EntityState>.Codec _map_entityStates_codec
        = new pbc::MapField<long, global::Msg.EntityState>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.EntityState.Parser), 10);
    private readonly pbc::MapField<long, global::Msg.EntityState> entityStates_ = new pbc::MapField<long, global::Msg.EntityState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.EntityState> EntityStates {
      get { return entityStates_; }
    }

    /// <summary>Field number for the "Interaction" field.</summary>
    public const int InteractionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.Interaction> _repeated_interaction_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.Interaction.Parser);
    private readonly pbc::RepeatedField<global::Msg.Interaction> interaction_ = new pbc::RepeatedField<global::Msg.Interaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.Interaction> Interaction {
      get { return interaction_; }
    }

    /// <summary>Field number for the "Characters" field.</summary>
    public const int CharactersFieldNumber = 3;
    private static readonly pbc::MapField<long, global::Msg.Character>.Codec _map_characters_codec
        = new pbc::MapField<long, global::Msg.Character>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.Character.Parser), 26);
    private readonly pbc::MapField<long, global::Msg.Character> characters_ = new pbc::MapField<long, global::Msg.Character>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.Character> Characters {
      get { return characters_; }
    }

    /// <summary>Field number for the "DestroyEntity" field.</summary>
    public const int DestroyEntityFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_destroyEntity_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> destroyEntity_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> DestroyEntity {
      get { return destroyEntity_; }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 4;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "RunnigNo" field.</summary>
    public const int RunnigNoFieldNumber = 5;
    private long runnigNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RunnigNo {
      get { return runnigNo_; }
      set {
        runnigNo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!EntityStates.Equals(other.EntityStates)) return false;
      if(!interaction_.Equals(other.interaction_)) return false;
      if (!Characters.Equals(other.Characters)) return false;
      if(!destroyEntity_.Equals(other.destroyEntity_)) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (RunnigNo != other.RunnigNo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= EntityStates.GetHashCode();
      hash ^= interaction_.GetHashCode();
      hash ^= Characters.GetHashCode();
      hash ^= destroyEntity_.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (RunnigNo != 0L) hash ^= RunnigNo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entityStates_.WriteTo(output, _map_entityStates_codec);
      interaction_.WriteTo(output, _repeated_interaction_codec);
      characters_.WriteTo(output, _map_characters_codec);
      if (TimeStamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TimeStamp);
      }
      if (RunnigNo != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RunnigNo);
      }
      destroyEntity_.WriteTo(output, _repeated_destroyEntity_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entityStates_.CalculateSize(_map_entityStates_codec);
      size += interaction_.CalculateSize(_repeated_interaction_codec);
      size += characters_.CalculateSize(_map_characters_codec);
      size += destroyEntity_.CalculateSize(_repeated_destroyEntity_codec);
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (RunnigNo != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RunnigNo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameFrame other) {
      if (other == null) {
        return;
      }
      entityStates_.Add(other.entityStates_);
      interaction_.Add(other.interaction_);
      characters_.Add(other.characters_);
      destroyEntity_.Add(other.destroyEntity_);
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.RunnigNo != 0L) {
        RunnigNo = other.RunnigNo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entityStates_.AddEntriesFrom(input, _map_entityStates_codec);
            break;
          }
          case 18: {
            interaction_.AddEntriesFrom(input, _repeated_interaction_codec);
            break;
          }
          case 26: {
            characters_.AddEntriesFrom(input, _map_characters_codec);
            break;
          }
          case 32: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 40: {
            RunnigNo = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            destroyEntity_.AddEntriesFrom(input, _repeated_destroyEntity_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Animation : pb::IMessage<Animation> {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      Position = other.position_ != null ? other.Position.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Msg.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Msg.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Msg.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Msg.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (position_ == null) {
              position_ = new global::Msg.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              rotation_ = new global::Msg.Quaternion();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionCache : pb::IMessage<SessionCache> {
    private static readonly pb::MessageParser<SessionCache> _parser = new pb::MessageParser<SessionCache>(() => new SessionCache());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionCache(SessionCache other) : this() {
      GameServerInfo = other.gameServerInfo_ != null ? other.GameServerInfo.Clone() : null;
      SessionInfo = other.sessionInfo_ != null ? other.SessionInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionCache Clone() {
      return new SessionCache(this);
    }

    /// <summary>Field number for the "GameServerInfo" field.</summary>
    public const int GameServerInfoFieldNumber = 1;
    private global::Msg.ServerInfo gameServerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ServerInfo GameServerInfo {
      get { return gameServerInfo_; }
      set {
        gameServerInfo_ = value;
      }
    }

    /// <summary>Field number for the "SessionInfo" field.</summary>
    public const int SessionInfoFieldNumber = 2;
    private global::Msg.SessionInfo sessionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SessionInfo SessionInfo {
      get { return sessionInfo_; }
      set {
        sessionInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameServerInfo, other.GameServerInfo)) return false;
      if (!object.Equals(SessionInfo, other.SessionInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameServerInfo_ != null) hash ^= GameServerInfo.GetHashCode();
      if (sessionInfo_ != null) hash ^= SessionInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameServerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameServerInfo);
      }
      if (sessionInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SessionInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameServerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameServerInfo);
      }
      if (sessionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionCache other) {
      if (other == null) {
        return;
      }
      if (other.gameServerInfo_ != null) {
        if (gameServerInfo_ == null) {
          gameServerInfo_ = new global::Msg.ServerInfo();
        }
        GameServerInfo.MergeFrom(other.GameServerInfo);
      }
      if (other.sessionInfo_ != null) {
        if (sessionInfo_ == null) {
          sessionInfo_ = new global::Msg.SessionInfo();
        }
        SessionInfo.MergeFrom(other.SessionInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameServerInfo_ == null) {
              gameServerInfo_ = new global::Msg.ServerInfo();
            }
            input.ReadMessage(gameServerInfo_);
            break;
          }
          case 18: {
            if (sessionInfo_ == null) {
              sessionInfo_ = new global::Msg.SessionInfo();
            }
            input.ReadMessage(sessionInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "W" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      posMap_ = other.posMap_.Clone();
      timeStamp_ = other.timeStamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "PosMap" field.</summary>
    public const int PosMapFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Msg.Transform>.Codec _map_posMap_codec
        = new pbc::MapField<long, global::Msg.Transform>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.Transform.Parser), 10);
    private readonly pbc::MapField<long, global::Msg.Transform> posMap_ = new pbc::MapField<long, global::Msg.Transform>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.Transform> PosMap {
      get { return posMap_; }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PosMap.Equals(other.PosMap)) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PosMap.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      posMap_.WriteTo(output, _map_posMap_codec);
      if (TimeStamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeStamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += posMap_.CalculateSize(_map_posMap_codec);
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      posMap_.Add(other.posMap_);
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            posMap_.AddEntriesFrom(input, _map_posMap_codec);
            break;
          }
          case 16: {
            TimeStamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      errType_ = other.errType_;
      errMsg_ = other.errMsg_;
      runnigNo_ = other.runnigNo_;
      fromId_ = other.fromId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "ErrType" field.</summary>
    public const int ErrTypeFieldNumber = 1;
    private string errType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrType {
      get { return errType_; }
      set {
        errType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RunnigNo" field.</summary>
    public const int RunnigNoFieldNumber = 3;
    private string runnigNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunnigNo {
      get { return runnigNo_; }
      set {
        runnigNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromId" field.</summary>
    public const int FromIdFieldNumber = 4;
    private long fromId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrType != other.ErrType) return false;
      if (ErrMsg != other.ErrMsg) return false;
      if (RunnigNo != other.RunnigNo) return false;
      if (FromId != other.FromId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrType.Length != 0) hash ^= ErrType.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (RunnigNo.Length != 0) hash ^= RunnigNo.GetHashCode();
      if (FromId != 0L) hash ^= FromId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrType);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (RunnigNo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RunnigNo);
      }
      if (FromId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FromId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrType);
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (RunnigNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunnigNo);
      }
      if (FromId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.ErrType.Length != 0) {
        ErrType = other.ErrType;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      if (other.RunnigNo.Length != 0) {
        RunnigNo = other.RunnigNo;
      }
      if (other.FromId != 0L) {
        FromId = other.FromId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrType = input.ReadString();
            break;
          }
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
          case 26: {
            RunnigNo = input.ReadString();
            break;
          }
          case 32: {
            FromId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeStamp : pb::IMessage<TimeStamp> {
    private static readonly pb::MessageParser<TimeStamp> _parser = new pb::MessageParser<TimeStamp>(() => new TimeStamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeStamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStamp(TimeStamp other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStamp Clone() {
      return new TimeStamp(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeStamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeStamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeStamp other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID : pb::IMessage<ID> {
    private static readonly pb::MessageParser<ID> _parser = new pb::MessageParser<ID>(() => new ID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID(ID other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID Clone() {
      return new ID(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageToUser : pb::IMessage<MessageToUser> {
    private static readonly pb::MessageParser<MessageToUser> _parser = new pb::MessageParser<MessageToUser>(() => new MessageToUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageToUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageToUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageToUser(MessageToUser other) : this() {
      msgType_ = other.msgType_;
      context_ = other.context_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageToUser Clone() {
      return new MessageToUser(this);
    }

    /// <summary>Field number for the "MsgType" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private global::Msg.MessageToUser.Types.Type msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.MessageToUser.Types.Type MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "Context" field.</summary>
    public const int ContextFieldNumber = 2;
    private string context_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageToUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageToUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (Context != other.Context) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MsgType);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageToUser other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            msgType_ = (global::Msg.MessageToUser.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Context = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MessageToUser message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("ToView")] ToView = 0,
        [pbr::OriginalName("ToDebugLog")] ToDebugLog = 2,
      }

    }
    #endregion

  }

  public sealed partial class LogMessage : pb::IMessage<LogMessage> {
    private static readonly pb::MessageParser<LogMessage> _parser = new pb::MessageParser<LogMessage>(() => new LogMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage(LogMessage other) : this() {
      logLevel_ = other.logLevel_;
      context_ = other.context_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogMessage Clone() {
      return new LogMessage(this);
    }

    /// <summary>Field number for the "LogLevel" field.</summary>
    public const int LogLevelFieldNumber = 1;
    private global::Msg.LogMessage.Types.Level logLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.LogMessage.Types.Level LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "Context" field.</summary>
    public const int ContextFieldNumber = 2;
    private string context_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogLevel != other.LogLevel) return false;
      if (Context != other.Context) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogLevel != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LogLevel);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogLevel);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogMessage other) {
      if (other == null) {
        return;
      }
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            logLevel_ = (global::Msg.LogMessage.Types.Level) input.ReadEnum();
            break;
          }
          case 18: {
            Context = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Level {
        [pbr::OriginalName("Debug")] Debug = 0,
        [pbr::OriginalName("Info")] Info = 1,
        [pbr::OriginalName("Warn")] Warn = 2,
        [pbr::OriginalName("Fatal")] Fatal = 3,
      }

    }
    #endregion

  }

  public sealed partial class FriendRequest : pb::IMessage<FriendRequest> {
    private static readonly pb::MessageParser<FriendRequest> _parser = new pb::MessageParser<FriendRequest>(() => new FriendRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendRequest(FriendRequest other) : this() {
      userId_ = other.userId_;
      userName_ = other.userName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendRequest Clone() {
      return new FriendRequest(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchKeyWord : pb::IMessage<SearchKeyWord> {
    private static readonly pb::MessageParser<SearchKeyWord> _parser = new pb::MessageParser<SearchKeyWord>(() => new SearchKeyWord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchKeyWord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchKeyWord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchKeyWord(SearchKeyWord other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchKeyWord Clone() {
      return new SearchKeyWord(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchKeyWord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchKeyWord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchKeyWord other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchResult : pb::IMessage<SearchResult> {
    private static readonly pb::MessageParser<SearchResult> _parser = new pb::MessageParser<SearchResult>(() => new SearchResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResult(SearchResult other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchResult Clone() {
      return new SearchResult(this);
    }

    /// <summary>Field number for the "List" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.UserInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.UserInfo> list_ = new pbc::RepeatedField<global::Msg.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.UserInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchResult other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserList : pb::IMessage<UserList> {
    private static readonly pb::MessageParser<UserList> _parser = new pb::MessageParser<UserList>(() => new UserList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList(UserList other) : this() {
      userInfos_ = other.userInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList Clone() {
      return new UserList(this);
    }

    /// <summary>Field number for the "userInfos" field.</summary>
    public const int UserInfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.UserInfo> _repeated_userInfos_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.UserInfo> userInfos_ = new pbc::RepeatedField<global::Msg.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.UserInfo> UserInfos {
      get { return userInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userInfos_.Equals(other.userInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      userInfos_.WriteTo(output, _repeated_userInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userInfos_.CalculateSize(_repeated_userInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserList other) {
      if (other == null) {
        return;
      }
      userInfos_.Add(other.userInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userInfos_.AddEntriesFrom(input, _repeated_userInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameCreation : pb::IMessage<GameCreation> {
    private static readonly pb::MessageParser<GameCreation> _parser = new pb::MessageParser<GameCreation>(() => new GameCreation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameCreation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCreation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCreation(GameCreation other) : this() {
      RoomInfo = other.roomInfo_ != null ? other.RoomInfo.Clone() : null;
      playerSessions_ = other.playerSessions_.Clone();
      masterSessionId_ = other.masterSessionId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCreation Clone() {
      return new GameCreation(this);
    }

    /// <summary>Field number for the "RoomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Msg.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "PlayerSessions" field.</summary>
    public const int PlayerSessionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.SessionInfo> _repeated_playerSessions_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.SessionInfo.Parser);
    private readonly pbc::RepeatedField<global::Msg.SessionInfo> playerSessions_ = new pbc::RepeatedField<global::Msg.SessionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.SessionInfo> PlayerSessions {
      get { return playerSessions_; }
    }

    /// <summary>Field number for the "MasterSessionId" field.</summary>
    public const int MasterSessionIdFieldNumber = 3;
    private long masterSessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MasterSessionId {
      get { return masterSessionId_; }
      set {
        masterSessionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameCreation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameCreation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if(!playerSessions_.Equals(other.playerSessions_)) return false;
      if (MasterSessionId != other.MasterSessionId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      hash ^= playerSessions_.GetHashCode();
      if (MasterSessionId != 0L) hash ^= MasterSessionId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      playerSessions_.WriteTo(output, _repeated_playerSessions_codec);
      if (MasterSessionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MasterSessionId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      size += playerSessions_.CalculateSize(_repeated_playerSessions_codec);
      if (MasterSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MasterSessionId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameCreation other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Msg.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      playerSessions_.Add(other.playerSessions_);
      if (other.MasterSessionId != 0L) {
        MasterSessionId = other.MasterSessionId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Msg.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 18: {
            playerSessions_.AddEntriesFrom(input, _repeated_playerSessions_codec);
            break;
          }
          case 24: {
            MasterSessionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PemKey : pb::IMessage<PemKey> {
    private static readonly pb::MessageParser<PemKey> _parser = new pb::MessageParser<PemKey>(() => new PemKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PemKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PemKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PemKey(PemKey other) : this() {
      tLS_ = other.tLS_;
      sSL_ = other.sSL_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PemKey Clone() {
      return new PemKey(this);
    }

    /// <summary>Field number for the "TLS" field.</summary>
    public const int TLSFieldNumber = 1;
    private string tLS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TLS {
      get { return tLS_; }
      set {
        tLS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SSL" field.</summary>
    public const int SSLFieldNumber = 2;
    private string sSL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SSL {
      get { return sSL_; }
      set {
        sSL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PemKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PemKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TLS != other.TLS) return false;
      if (SSL != other.SSL) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TLS.Length != 0) hash ^= TLS.GetHashCode();
      if (SSL.Length != 0) hash ^= SSL.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TLS.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TLS);
      }
      if (SSL.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SSL);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TLS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TLS);
      }
      if (SSL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SSL);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PemKey other) {
      if (other == null) {
        return;
      }
      if (other.TLS.Length != 0) {
        TLS = other.TLS;
      }
      if (other.SSL.Length != 0) {
        SSL = other.SSL;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TLS = input.ReadString();
            break;
          }
          case 18: {
            SSL = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RoomPrepareView : pb::IMessage<RoomPrepareView> {
    private static readonly pb::MessageParser<RoomPrepareView> _parser = new pb::MessageParser<RoomPrepareView>(() => new RoomPrepareView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPrepareView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPrepareView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPrepareView(RoomPrepareView other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPrepareView Clone() {
      return new RoomPrepareView(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPrepareView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPrepareView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPrepareView other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EntityInfo : pb::IMessage<EntityInfo> {
    private static readonly pb::MessageParser<EntityInfo> _parser = new pb::MessageParser<EntityInfo>(() => new EntityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfo(EntityInfo other) : this() {
      uuid_ = other.uuid_;
      teamNo_ = other.teamNo_;
      Transform = other.transform_ != null ? other.Transform.Clone() : null;
      characterId_ = other.characterId_;
      ActiveSkill = other.activeSkill_ != null ? other.ActiveSkill.Clone() : null;
      motion_ = other.motion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityInfo Clone() {
      return new EntityInfo(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "TeamNo" field.</summary>
    public const int TeamNoFieldNumber = 4;
    private int teamNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamNo {
      get { return teamNo_; }
      set {
        teamNo_ = value;
      }
    }

    /// <summary>Field number for the "Transform" field.</summary>
    public const int TransformFieldNumber = 2;
    private global::Msg.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "CharacterId" field.</summary>
    public const int CharacterIdFieldNumber = 3;
    private long characterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CharacterId {
      get { return characterId_; }
      set {
        characterId_ = value;
      }
    }

    /// <summary>Field number for the "ActiveSkill" field.</summary>
    public const int ActiveSkillFieldNumber = 5;
    private global::Msg.Skill activeSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Skill ActiveSkill {
      get { return activeSkill_; }
      set {
        activeSkill_ = value;
      }
    }

    /// <summary>Field number for the "Motion" field.</summary>
    public const int MotionFieldNumber = 6;
    private string motion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Motion {
      get { return motion_; }
      set {
        motion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (TeamNo != other.TeamNo) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (CharacterId != other.CharacterId) return false;
      if (!object.Equals(ActiveSkill, other.ActiveSkill)) return false;
      if (Motion != other.Motion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (TeamNo != 0) hash ^= TeamNo.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (CharacterId != 0L) hash ^= CharacterId.GetHashCode();
      if (activeSkill_ != null) hash ^= ActiveSkill.GetHashCode();
      if (Motion.Length != 0) hash ^= Motion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (transform_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transform);
      }
      if (CharacterId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CharacterId);
      }
      if (TeamNo != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamNo);
      }
      if (activeSkill_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ActiveSkill);
      }
      if (Motion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Motion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (TeamNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamNo);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (CharacterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterId);
      }
      if (activeSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveSkill);
      }
      if (Motion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Motion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.TeamNo != 0) {
        TeamNo = other.TeamNo;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::Msg.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.CharacterId != 0L) {
        CharacterId = other.CharacterId;
      }
      if (other.activeSkill_ != null) {
        if (activeSkill_ == null) {
          activeSkill_ = new global::Msg.Skill();
        }
        ActiveSkill.MergeFrom(other.ActiveSkill);
      }
      if (other.Motion.Length != 0) {
        Motion = other.Motion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            if (transform_ == null) {
              transform_ = new global::Msg.Transform();
            }
            input.ReadMessage(transform_);
            break;
          }
          case 24: {
            CharacterId = input.ReadInt64();
            break;
          }
          case 32: {
            TeamNo = input.ReadInt32();
            break;
          }
          case 42: {
            if (activeSkill_ == null) {
              activeSkill_ = new global::Msg.Skill();
            }
            input.ReadMessage(activeSkill_);
            break;
          }
          case 50: {
            Motion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Skill : pb::IMessage<Skill> {
    private static readonly pb::MessageParser<Skill> _parser = new pb::MessageParser<Skill>(() => new Skill());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill(Skill other) : this() {
      active_ = other.active_;
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill Clone() {
      return new Skill(this);
    }

    /// <summary>Field number for the "Active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 3;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Value != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skill other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HomeView : pb::IMessage<HomeView> {
    private static readonly pb::MessageParser<HomeView> _parser = new pb::MessageParser<HomeView>(() => new HomeView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HomeView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeView(HomeView other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HomeView Clone() {
      return new HomeView(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HomeView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HomeView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HomeView other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RoomSetting : pb::IMessage<RoomSetting> {
    private static readonly pb::MessageParser<RoomSetting> _parser = new pb::MessageParser<RoomSetting>(() => new RoomSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetting(RoomSetting other) : this() {
      maxPlayer_ = other.maxPlayer_;
      gameType_ = other.gameType_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomSetting Clone() {
      return new RoomSetting(this);
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 1;
    private int maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 2;
    private string gameType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameType {
      get { return gameType_; }
      set {
        gameType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxPlayer != other.MaxPlayer) return false;
      if (GameType != other.GameType) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (GameType.Length != 0) hash ^= GameType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPlayer != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxPlayer);
      }
      if (GameType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (GameType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomSetting other) {
      if (other == null) {
        return;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.GameType.Length != 0) {
        GameType = other.GameType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 18: {
            GameType = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomList : pb::IMessage<RoomList> {
    private static readonly pb::MessageParser<RoomList> _parser = new pb::MessageParser<RoomList>(() => new RoomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList(RoomList other) : this() {
      item_ = other.item_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomList Clone() {
      return new RoomList(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.RoomReview> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.RoomReview.Parser);
    private readonly pbc::RepeatedField<global::Msg.RoomReview> item_ = new pbc::RepeatedField<global::Msg.RoomReview>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.RoomReview> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomList other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      uuid_ = other.uuid_;
      name_ = other.name_;
      gameType_ = other.gameType_;
      ownerUuid_ = other.ownerUuid_;
      userInRoom_ = other.userInRoom_.Clone();
      readyUser_ = other.readyUser_.Clone();
      status_ = other.status_;
      leftMilliSecond_ = other.leftMilliSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 3;
    private string gameType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameType {
      get { return gameType_; }
      set {
        gameType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OwnerUuid" field.</summary>
    public const int OwnerUuidFieldNumber = 4;
    private long ownerUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerUuid {
      get { return ownerUuid_; }
      set {
        ownerUuid_ = value;
      }
    }

    /// <summary>Field number for the "UserInRoom" field.</summary>
    public const int UserInRoomFieldNumber = 5;
    private static readonly pbc::MapField<long, global::Msg.UserInfo>.Codec _map_userInRoom_codec
        = new pbc::MapField<long, global::Msg.UserInfo>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.UserInfo.Parser), 42);
    private readonly pbc::MapField<long, global::Msg.UserInfo> userInRoom_ = new pbc::MapField<long, global::Msg.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.UserInfo> UserInRoom {
      get { return userInRoom_; }
    }

    /// <summary>Field number for the "ReadyUser" field.</summary>
    public const int ReadyUserFieldNumber = 6;
    private static readonly pbc::MapField<long, bool>.Codec _map_readyUser_codec
        = new pbc::MapField<long, bool>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForBool(16), 50);
    private readonly pbc::MapField<long, bool> readyUser_ = new pbc::MapField<long, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, bool> ReadyUser {
      get { return readyUser_; }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Msg.RoomInfo.Types.RoomStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RoomInfo.Types.RoomStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "LeftMilliSecond" field.</summary>
    public const int LeftMilliSecondFieldNumber = 8;
    private long leftMilliSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeftMilliSecond {
      get { return leftMilliSecond_; }
      set {
        leftMilliSecond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Name != other.Name) return false;
      if (GameType != other.GameType) return false;
      if (OwnerUuid != other.OwnerUuid) return false;
      if (!UserInRoom.Equals(other.UserInRoom)) return false;
      if (!ReadyUser.Equals(other.ReadyUser)) return false;
      if (Status != other.Status) return false;
      if (LeftMilliSecond != other.LeftMilliSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GameType.Length != 0) hash ^= GameType.GetHashCode();
      if (OwnerUuid != 0L) hash ^= OwnerUuid.GetHashCode();
      hash ^= UserInRoom.GetHashCode();
      hash ^= ReadyUser.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (LeftMilliSecond != 0L) hash ^= LeftMilliSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (GameType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameType);
      }
      if (OwnerUuid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OwnerUuid);
      }
      userInRoom_.WriteTo(output, _map_userInRoom_codec);
      readyUser_.WriteTo(output, _map_readyUser_codec);
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (LeftMilliSecond != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LeftMilliSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GameType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameType);
      }
      if (OwnerUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerUuid);
      }
      size += userInRoom_.CalculateSize(_map_userInRoom_codec);
      size += readyUser_.CalculateSize(_map_readyUser_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (LeftMilliSecond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftMilliSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GameType.Length != 0) {
        GameType = other.GameType;
      }
      if (other.OwnerUuid != 0L) {
        OwnerUuid = other.OwnerUuid;
      }
      userInRoom_.Add(other.userInRoom_);
      readyUser_.Add(other.readyUser_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.LeftMilliSecond != 0L) {
        LeftMilliSecond = other.LeftMilliSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            GameType = input.ReadString();
            break;
          }
          case 32: {
            OwnerUuid = input.ReadInt64();
            break;
          }
          case 42: {
            userInRoom_.AddEntriesFrom(input, _map_userInRoom_codec);
            break;
          }
          case 50: {
            readyUser_.AddEntriesFrom(input, _map_readyUser_codec);
            break;
          }
          case 56: {
            status_ = (global::Msg.RoomInfo.Types.RoomStatus) input.ReadEnum();
            break;
          }
          case 64: {
            LeftMilliSecond = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RoomInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RoomStatus {
        [pbr::OriginalName("Preparing")] Preparing = 0,
        [pbr::OriginalName("OnPlaying")] OnPlaying = 1,
        [pbr::OriginalName("Ending")] Ending = 2,
      }

    }
    #endregion

  }

  public sealed partial class RoomReview : pb::IMessage<RoomReview> {
    private static readonly pb::MessageParser<RoomReview> _parser = new pb::MessageParser<RoomReview>(() => new RoomReview());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomReview> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReview() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReview(RoomReview other) : this() {
      uuid_ = other.uuid_;
      name_ = other.name_;
      gameType_ = other.gameType_;
      maxPlayer_ = other.maxPlayer_;
      inRoomPlayer_ = other.inRoomPlayer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReview Clone() {
      return new RoomReview(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 3;
    private string gameType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameType {
      get { return gameType_; }
      set {
        gameType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 4;
    private int maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "InRoomPlayer" field.</summary>
    public const int InRoomPlayerFieldNumber = 5;
    private int inRoomPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InRoomPlayer {
      get { return inRoomPlayer_; }
      set {
        inRoomPlayer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomReview);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomReview other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Name != other.Name) return false;
      if (GameType != other.GameType) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (InRoomPlayer != other.InRoomPlayer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GameType.Length != 0) hash ^= GameType.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (InRoomPlayer != 0) hash ^= InRoomPlayer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (GameType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameType);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxPlayer);
      }
      if (InRoomPlayer != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InRoomPlayer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GameType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameType);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (InRoomPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InRoomPlayer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomReview other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GameType.Length != 0) {
        GameType = other.GameType;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.InRoomPlayer != 0) {
        InRoomPlayer = other.InRoomPlayer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            GameType = input.ReadString();
            break;
          }
          case 32: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 40: {
            InRoomPlayer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomContent : pb::IMessage<RoomContent> {
    private static readonly pb::MessageParser<RoomContent> _parser = new pb::MessageParser<RoomContent>(() => new RoomContent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomContent(RoomContent other) : this() {
      uuid_ = other.uuid_;
      players_ = other.players_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomContent Clone() {
      return new RoomContent(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Msg.PlayerInfo>.Codec _map_players_codec
        = new pbc::MapField<string, global::Msg.PlayerInfo>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Msg.PlayerInfo.Parser), 18);
    private readonly pbc::MapField<string, global::Msg.PlayerInfo> players_ = new pbc::MapField<string, global::Msg.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Msg.PlayerInfo> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (!Players.Equals(other.Players)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      hash ^= Players.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      players_.WriteTo(output, _map_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      size += players_.CalculateSize(_map_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomContent other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      players_.Add(other.players_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _map_players_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      characterCode_ = other.characterCode_;
      teamNo_ = other.teamNo_;
      Character = other.character_ != null ? other.Character.Clone() : null;
      userId_ = other.userId_;
      userName_ = other.userName_;
      isReady_ = other.isReady_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "CharacterCode" field.</summary>
    public const int CharacterCodeFieldNumber = 1;
    private long characterCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CharacterCode {
      get { return characterCode_; }
      set {
        characterCode_ = value;
      }
    }

    /// <summary>Field number for the "TeamNo" field.</summary>
    public const int TeamNoFieldNumber = 2;
    private int teamNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamNo {
      get { return teamNo_; }
      set {
        teamNo_ = value;
      }
    }

    /// <summary>Field number for the "Character" field.</summary>
    public const int CharacterFieldNumber = 4;
    private global::Msg.Character character_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Character Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 5;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 6;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsReady" field.</summary>
    public const int IsReadyFieldNumber = 7;
    private bool isReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharacterCode != other.CharacterCode) return false;
      if (TeamNo != other.TeamNo) return false;
      if (!object.Equals(Character, other.Character)) return false;
      if (UserId != other.UserId) return false;
      if (UserName != other.UserName) return false;
      if (IsReady != other.IsReady) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharacterCode != 0L) hash ^= CharacterCode.GetHashCode();
      if (TeamNo != 0) hash ^= TeamNo.GetHashCode();
      if (character_ != null) hash ^= Character.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (IsReady != false) hash ^= IsReady.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterCode != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CharacterCode);
      }
      if (TeamNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamNo);
      }
      if (character_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Character);
      }
      if (UserId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserName);
      }
      if (IsReady != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsReady);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharacterCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterCode);
      }
      if (TeamNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamNo);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.CharacterCode != 0L) {
        CharacterCode = other.CharacterCode;
      }
      if (other.TeamNo != 0) {
        TeamNo = other.TeamNo;
      }
      if (other.character_ != null) {
        if (character_ == null) {
          character_ = new global::Msg.Character();
        }
        Character.MergeFrom(other.Character);
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.IsReady != false) {
        IsReady = other.IsReady;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharacterCode = input.ReadInt64();
            break;
          }
          case 16: {
            TeamNo = input.ReadInt32();
            break;
          }
          case 34: {
            if (character_ == null) {
              character_ = new global::Msg.Character();
            }
            input.ReadMessage(character_);
            break;
          }
          case 40: {
            UserId = input.ReadInt64();
            break;
          }
          case 50: {
            UserName = input.ReadString();
            break;
          }
          case 56: {
            IsReady = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// character 即是沒有實體之腳色
  /// entity 則藉由character來初始化
  /// </summary>
  public sealed partial class Character : pb::IMessage<Character> {
    private static readonly pb::MessageParser<Character> _parser = new pb::MessageParser<Character>(() => new Character());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Character> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character(Character other) : this() {
      uuid_ = other.uuid_;
      characterType_ = other.characterType_;
      name_ = other.name_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      level_ = other.level_;
      exp_ = other.exp_;
      maxHealth_ = other.maxHealth_;
      Ability = other.ability_ != null ? other.Ability.Clone() : null;
      equipments_ = other.equipments_.Clone();
      attr_ = other.attr_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character Clone() {
      return new Character(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "CharacterType" field.</summary>
    public const int CharacterTypeFieldNumber = 2;
    private string characterType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharacterType {
      get { return characterType_; }
      set {
        characterType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 4;
    private global::Msg.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 6;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "MaxHealth" field.</summary>
    public const int MaxHealthFieldNumber = 10;
    private float maxHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxHealth {
      get { return maxHealth_; }
      set {
        maxHealth_ = value;
      }
    }

    /// <summary>Field number for the "Ability" field.</summary>
    public const int AbilityFieldNumber = 7;
    private global::Msg.Ability ability_;
    /// <summary>
    /// 基本能力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Ability Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "Equipments" field.</summary>
    public const int EquipmentsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Msg.Equipment> _repeated_equipments_codec
        = pb::FieldCodec.ForMessage(66, global::Msg.Equipment.Parser);
    private readonly pbc::RepeatedField<global::Msg.Equipment> equipments_ = new pbc::RepeatedField<global::Msg.Equipment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.Equipment> Equipments {
      get { return equipments_; }
    }

    /// <summary>Field number for the "Attr" field.</summary>
    public const int AttrFieldNumber = 9;
    private static readonly pbc::MapField<string, float>.Codec _map_attr_codec
        = new pbc::MapField<string, float>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForFloat(21), 74);
    private readonly pbc::MapField<string, float> attr_ = new pbc::MapField<string, float>();
    /// <summary>
    /// 戰鬥時添加的狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, float> Attr {
      get { return attr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Character);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Character other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (CharacterType != other.CharacterType) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (MaxHealth != other.MaxHealth) return false;
      if (!object.Equals(Ability, other.Ability)) return false;
      if(!equipments_.Equals(other.equipments_)) return false;
      if (!Attr.Equals(other.Attr)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (CharacterType.Length != 0) hash ^= CharacterType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (MaxHealth != 0F) hash ^= MaxHealth.GetHashCode();
      if (ability_ != null) hash ^= Ability.GetHashCode();
      hash ^= equipments_.GetHashCode();
      hash ^= Attr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (CharacterType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CharacterType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (color_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Color);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Exp);
      }
      if (ability_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Ability);
      }
      equipments_.WriteTo(output, _repeated_equipments_codec);
      attr_.WriteTo(output, _map_attr_codec);
      if (MaxHealth != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MaxHealth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (CharacterType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (MaxHealth != 0F) {
        size += 1 + 4;
      }
      if (ability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ability);
      }
      size += equipments_.CalculateSize(_repeated_equipments_codec);
      size += attr_.CalculateSize(_map_attr_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Character other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.CharacterType.Length != 0) {
        CharacterType = other.CharacterType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Msg.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.MaxHealth != 0F) {
        MaxHealth = other.MaxHealth;
      }
      if (other.ability_ != null) {
        if (ability_ == null) {
          ability_ = new global::Msg.Ability();
        }
        Ability.MergeFrom(other.Ability);
      }
      equipments_.Add(other.equipments_);
      attr_.Add(other.attr_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            CharacterType = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (color_ == null) {
              color_ = new global::Msg.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Exp = input.ReadInt32();
            break;
          }
          case 58: {
            if (ability_ == null) {
              ability_ = new global::Msg.Ability();
            }
            input.ReadMessage(ability_);
            break;
          }
          case 66: {
            equipments_.AddEntriesFrom(input, _repeated_equipments_codec);
            break;
          }
          case 74: {
            attr_.AddEntriesFrom(input, _map_attr_codec);
            break;
          }
          case 85: {
            MaxHealth = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionInfo : pb::IMessage<SessionInfo> {
    private static readonly pb::MessageParser<SessionInfo> _parser = new pb::MessageParser<SessionInfo>(() => new SessionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionInfo(SessionInfo other) : this() {
      state_ = other.state_;
      capacity_ = other.capacity_;
      uuid_ = other.uuid_;
      Key = other.key_ != null ? other.Key.Clone() : null;
      UserInfo = other.userInfo_ != null ? other.UserInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionInfo Clone() {
      return new SessionInfo(this);
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Msg.SessionInfo.Types.SessionState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SessionInfo.Types.SessionState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private global::Msg.SessionInfo.Types.SessionCapacity capacity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SessionInfo.Types.SessionCapacity Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 5;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 3;
    private global::Msg.SessionKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SessionKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "UserInfo" field.</summary>
    public const int UserInfoFieldNumber = 4;
    private global::Msg.UserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Capacity != other.Capacity) return false;
      if (Uuid != other.Uuid) return false;
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (key_ != null) hash ^= Key.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (Capacity != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Capacity);
      }
      if (key_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Key);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserInfo);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Uuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Capacity);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionInfo other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Msg.SessionKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          userInfo_ = new global::Msg.UserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Msg.SessionInfo.Types.SessionState) input.ReadEnum();
            break;
          }
          case 16: {
            capacity_ = (global::Msg.SessionInfo.Types.SessionCapacity) input.ReadEnum();
            break;
          }
          case 26: {
            if (key_ == null) {
              key_ = new global::Msg.SessionKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 34: {
            if (userInfo_ == null) {
              userInfo_ = new global::Msg.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
          case 40: {
            Uuid = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SessionInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SessionState {
        [pbr::OriginalName("NoSession")] NoSession = 0,
        [pbr::OriginalName("Guest")] Guest = 1,
        [pbr::OriginalName("UserIdle")] UserIdle = 2,
        [pbr::OriginalName("UserInRoom")] UserInRoom = 3,
        [pbr::OriginalName("ConnectingGame")] ConnectingGame = 4,
        [pbr::OriginalName("AgentServerWaitReconnect")] AgentServerWaitReconnect = 5,
        /// <summary>
        /// in game server
        /// </summary>
        [pbr::OriginalName("OnStart")] OnStart = 6,
        [pbr::OriginalName("Playing")] Playing = 7,
        [pbr::OriginalName("GameOver")] GameOver = 8,
        [pbr::OriginalName("GameServerWaitReconnect")] GameServerWaitReconnect = 9,
      }

      public enum SessionCapacity {
        [pbr::OriginalName("GM")] Gm = 0,
        [pbr::OriginalName("RoomMaster")] RoomMaster = 1,
        [pbr::OriginalName("RoomClient")] RoomClient = 2,
        [pbr::OriginalName("None")] None = 3,
      }

    }
    #endregion

  }

  public sealed partial class Success : pb::IMessage<Success> {
    private static readonly pb::MessageParser<Success> _parser = new pb::MessageParser<Success>(() => new Success());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Success> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Success() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Success(Success other) : this() {
      ok_ = other.ok_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Success Clone() {
      return new Success(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    private bool ok_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ok {
      get { return ok_; }
      set {
        ok_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Success);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Success other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ok != false) hash ^= Ok.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ok != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ok);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ok != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Success other) {
      if (other == null) {
        return;
      }
      if (other.Ok != false) {
        Ok = other.Ok;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ok = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttrSetting : pb::IMessage<AttrSetting> {
    private static readonly pb::MessageParser<AttrSetting> _parser = new pb::MessageParser<AttrSetting>(() => new AttrSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrSetting(AttrSetting other) : this() {
      method_ = other.method_;
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrSetting Clone() {
      return new AttrSetting(this);
    }

    /// <summary>Field number for the "Method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrSetting other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionKey : pb::IMessage<SessionKey> {
    private static readonly pb::MessageParser<SessionKey> _parser = new pb::MessageParser<SessionKey>(() => new SessionKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionKey(SessionKey other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionKey Clone() {
      return new SessionKey(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionKey other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      serverType_ = other.serverType_;
      publicKey_ = other.publicKey_;
      port_ = other.port_;
      addr_ = other.addr_;
      SessionKey = other.sessionKey_ != null ? other.SessionKey.Clone() : null;
      maxConn_ = other.maxConn_;
      nowConn_ = other.nowConn_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "ServerType" field.</summary>
    public const int ServerTypeFieldNumber = 1;
    private global::Msg.ServerInfo.Types.Type serverType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.ServerInfo.Types.Type ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 3;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Addr" field.</summary>
    public const int AddrFieldNumber = 4;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SessionKey" field.</summary>
    public const int SessionKeyFieldNumber = 5;
    private global::Msg.SessionKey sessionKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.SessionKey SessionKey {
      get { return sessionKey_; }
      set {
        sessionKey_ = value;
      }
    }

    /// <summary>Field number for the "MaxConn" field.</summary>
    public const int MaxConnFieldNumber = 6;
    private long maxConn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxConn {
      get { return maxConn_; }
      set {
        maxConn_ = value;
      }
    }

    /// <summary>Field number for the "NowConn" field.</summary>
    public const int NowConnFieldNumber = 7;
    private long nowConn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NowConn {
      get { return nowConn_; }
      set {
        nowConn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerType != other.ServerType) return false;
      if (PublicKey != other.PublicKey) return false;
      if (Port != other.Port) return false;
      if (Addr != other.Addr) return false;
      if (!object.Equals(SessionKey, other.SessionKey)) return false;
      if (MaxConn != other.MaxConn) return false;
      if (NowConn != other.NowConn) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerType != 0) hash ^= ServerType.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (sessionKey_ != null) hash ^= SessionKey.GetHashCode();
      if (MaxConn != 0L) hash ^= MaxConn.GetHashCode();
      if (NowConn != 0L) hash ^= NowConn.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ServerType);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PublicKey);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Port);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Addr);
      }
      if (sessionKey_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SessionKey);
      }
      if (MaxConn != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxConn);
      }
      if (NowConn != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(NowConn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServerType);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (sessionKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionKey);
      }
      if (MaxConn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxConn);
      }
      if (NowConn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NowConn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ServerType != 0) {
        ServerType = other.ServerType;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.sessionKey_ != null) {
        if (sessionKey_ == null) {
          sessionKey_ = new global::Msg.SessionKey();
        }
        SessionKey.MergeFrom(other.SessionKey);
      }
      if (other.MaxConn != 0L) {
        MaxConn = other.MaxConn;
      }
      if (other.NowConn != 0L) {
        NowConn = other.NowConn;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            serverType_ = (global::Msg.ServerInfo.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            PublicKey = input.ReadString();
            break;
          }
          case 26: {
            Port = input.ReadString();
            break;
          }
          case 34: {
            Addr = input.ReadString();
            break;
          }
          case 42: {
            if (sessionKey_ == null) {
              sessionKey_ = new global::Msg.SessionKey();
            }
            input.ReadMessage(sessionKey_);
            break;
          }
          case 48: {
            MaxConn = input.ReadInt64();
            break;
          }
          case 56: {
            NowConn = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("GameServer")] GameServer = 0,
        [pbr::OriginalName("AgentServer")] AgentServer = 1,
      }

    }
    #endregion

  }

  public sealed partial class LoginInput : pb::IMessage<LoginInput> {
    private static readonly pb::MessageParser<LoginInput> _parser = new pb::MessageParser<LoginInput>(() => new LoginInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput(LoginInput other) : this() {
      userName_ = other.userName_;
      pswd_ = other.pswd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput Clone() {
      return new LoginInput(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pswd" field.</summary>
    public const int PswdFieldNumber = 2;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Pswd != other.Pswd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pswd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginInput other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Pswd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistInput : pb::IMessage<RegistInput> {
    private static readonly pb::MessageParser<RegistInput> _parser = new pb::MessageParser<RegistInput>(() => new RegistInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput(RegistInput other) : this() {
      userName_ = other.userName_;
      pswd_ = other.pswd_;
      email_ = other.email_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput Clone() {
      return new RegistInput(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pswd" field.</summary>
    public const int PswdFieldNumber = 2;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Pswd != other.Pswd) return false;
      if (Email != other.Email) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pswd);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistInput other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Pswd = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      userName_ = other.userName_;
      uuid_ = other.uuid_;
      ownCharacter_ = other.ownCharacter_.Clone();
      usedCharacter_ = other.usedCharacter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "OwnCharacter" field.</summary>
    public const int OwnCharacterFieldNumber = 3;
    private static readonly pbc::MapField<long, global::Msg.Character>.Codec _map_ownCharacter_codec
        = new pbc::MapField<long, global::Msg.Character>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.Character.Parser), 26);
    private readonly pbc::MapField<long, global::Msg.Character> ownCharacter_ = new pbc::MapField<long, global::Msg.Character>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.Character> OwnCharacter {
      get { return ownCharacter_; }
    }

    /// <summary>Field number for the "UsedCharacter" field.</summary>
    public const int UsedCharacterFieldNumber = 4;
    private long usedCharacter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UsedCharacter {
      get { return usedCharacter_; }
      set {
        usedCharacter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Uuid != other.Uuid) return false;
      if (!OwnCharacter.Equals(other.OwnCharacter)) return false;
      if (UsedCharacter != other.UsedCharacter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      hash ^= OwnCharacter.GetHashCode();
      if (UsedCharacter != 0L) hash ^= UsedCharacter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      ownCharacter_.WriteTo(output, _map_ownCharacter_codec);
      if (UsedCharacter != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UsedCharacter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      size += ownCharacter_.CalculateSize(_map_ownCharacter_codec);
      if (UsedCharacter != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsedCharacter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      ownCharacter_.Add(other.ownCharacter_);
      if (other.UsedCharacter != 0L) {
        UsedCharacter = other.UsedCharacter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 26: {
            ownCharacter_.AddEntriesFrom(input, _map_ownCharacter_codec);
            break;
          }
          case 32: {
            UsedCharacter = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserState : pb::IMessage<UserState> {
    private static readonly pb::MessageParser<UserState> _parser = new pb::MessageParser<UserState>(() => new UserState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserState(UserState other) : this() {
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserState Clone() {
      return new UserState(this);
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Msg.UserState.Types.UserStatus state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.UserState.Types.UserStatus State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Msg.UserState.Types.UserStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UserStatus {
        [pbr::OriginalName("OnCreating")] OnCreating = 0,
        [pbr::OriginalName("Login")] Login = 1,
        [pbr::OriginalName("Offline")] Offline = 2,
        [pbr::OriginalName("OnPlaying")] OnPlaying = 3,
      }

    }
    #endregion

  }

  public sealed partial class CharacterSetting : pb::IMessage<CharacterSetting> {
    private static readonly pb::MessageParser<CharacterSetting> _parser = new pb::MessageParser<CharacterSetting>(() => new CharacterSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSetting(CharacterSetting other) : this() {
      uuid_ = other.uuid_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      equipments_ = other.equipments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterSetting Clone() {
      return new CharacterSetting(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::Msg.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Equipments" field.</summary>
    public const int EquipmentsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Msg.Equipment> _repeated_equipments_codec
        = pb::FieldCodec.ForMessage(66, global::Msg.Equipment.Parser);
    private readonly pbc::RepeatedField<global::Msg.Equipment> equipments_ = new pbc::RepeatedField<global::Msg.Equipment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.Equipment> Equipments {
      get { return equipments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if(!equipments_.Equals(other.equipments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      hash ^= equipments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      equipments_.WriteTo(output, _repeated_equipments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      size += equipments_.CalculateSize(_repeated_equipments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterSetting other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Msg.Color();
        }
        Color.MergeFrom(other.Color);
      }
      equipments_.Add(other.equipments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            if (color_ == null) {
              color_ = new global::Msg.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 66: {
            equipments_.AddEntriesFrom(input, _repeated_equipments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private int r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private int g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(B);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadInt32();
            break;
          }
          case 16: {
            G = input.ReadInt32();
            break;
          }
          case 24: {
            B = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Equipment : pb::IMessage<Equipment> {
    private static readonly pb::MessageParser<Equipment> _parser = new pb::MessageParser<Equipment>(() => new Equipment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Equipment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment(Equipment other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      uuid_ = other.uuid_;
      colors_ = other.colors_.Clone();
      Ability = other.ability_ != null ? other.Ability.Clone() : null;
      cD_ = other.cD_;
      usable_ = other.usable_;
      inventory_ = other.inventory_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment Clone() {
      return new Equipment(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 3;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Colors" field.</summary>
    public const int ColorsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Msg.Color> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(34, global::Msg.Color.Parser);
    private readonly pbc::RepeatedField<global::Msg.Color> colors_ = new pbc::RepeatedField<global::Msg.Color>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.Color> Colors {
      get { return colors_; }
    }

    /// <summary>Field number for the "Ability" field.</summary>
    public const int AbilityFieldNumber = 5;
    private global::Msg.Ability ability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Ability Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "CD" field.</summary>
    public const int CDFieldNumber = 6;
    private int cD_;
    /// <summary>
    /// Cool down time tick
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CD {
      get { return cD_; }
      set {
        cD_ = value;
      }
    }

    /// <summary>Field number for the "Usable" field.</summary>
    public const int UsableFieldNumber = 7;
    private int usable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Usable {
      get { return usable_; }
      set {
        usable_ = value;
      }
    }

    /// <summary>Field number for the "Inventory" field.</summary>
    public const int InventoryFieldNumber = 8;
    private int inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inventory {
      get { return inventory_; }
      set {
        inventory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Equipment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Equipment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Uuid != other.Uuid) return false;
      if(!colors_.Equals(other.colors_)) return false;
      if (!object.Equals(Ability, other.Ability)) return false;
      if (CD != other.CD) return false;
      if (Usable != other.Usable) return false;
      if (Inventory != other.Inventory) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      hash ^= colors_.GetHashCode();
      if (ability_ != null) hash ^= Ability.GetHashCode();
      if (CD != 0) hash ^= CD.GetHashCode();
      if (Usable != 0) hash ^= Usable.GetHashCode();
      if (Inventory != 0) hash ^= Inventory.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Uuid);
      }
      colors_.WriteTo(output, _repeated_colors_codec);
      if (ability_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ability);
      }
      if (CD != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CD);
      }
      if (Usable != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Usable);
      }
      if (Inventory != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Inventory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      size += colors_.CalculateSize(_repeated_colors_codec);
      if (ability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ability);
      }
      if (CD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CD);
      }
      if (Usable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Usable);
      }
      if (Inventory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inventory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Equipment other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      colors_.Add(other.colors_);
      if (other.ability_ != null) {
        if (ability_ == null) {
          ability_ = new global::Msg.Ability();
        }
        Ability.MergeFrom(other.Ability);
      }
      if (other.CD != 0) {
        CD = other.CD;
      }
      if (other.Usable != 0) {
        Usable = other.Usable;
      }
      if (other.Inventory != 0) {
        Inventory = other.Inventory;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            Uuid = input.ReadInt64();
            break;
          }
          case 34: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
          case 42: {
            if (ability_ == null) {
              ability_ = new global::Msg.Ability();
            }
            input.ReadMessage(ability_);
            break;
          }
          case 48: {
            CD = input.ReadInt32();
            break;
          }
          case 56: {
            Usable = input.ReadInt32();
            break;
          }
          case 64: {
            Inventory = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ability : pb::IMessage<Ability> {
    private static readonly pb::MessageParser<Ability> _parser = new pb::MessageParser<Ability>(() => new Ability());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability(Ability other) : this() {
      aTK_ = other.aTK_;
      dEF_ = other.dEF_;
      sPD_ = other.sPD_;
      tSPD_ = other.tSPD_;
      mP_ = other.mP_;
      mAKT_ = other.mAKT_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability Clone() {
      return new Ability(this);
    }

    /// <summary>Field number for the "ATK" field.</summary>
    public const int ATKFieldNumber = 1;
    private int aTK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ATK {
      get { return aTK_; }
      set {
        aTK_ = value;
      }
    }

    /// <summary>Field number for the "DEF" field.</summary>
    public const int DEFFieldNumber = 2;
    private int dEF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DEF {
      get { return dEF_; }
      set {
        dEF_ = value;
      }
    }

    /// <summary>Field number for the "SPD" field.</summary>
    public const int SPDFieldNumber = 3;
    private float sPD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SPD {
      get { return sPD_; }
      set {
        sPD_ = value;
      }
    }

    /// <summary>Field number for the "TSPD" field.</summary>
    public const int TSPDFieldNumber = 6;
    private float tSPD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TSPD {
      get { return tSPD_; }
      set {
        tSPD_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 4;
    private int mP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "MAKT" field.</summary>
    public const int MAKTFieldNumber = 5;
    private int mAKT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MAKT {
      get { return mAKT_; }
      set {
        mAKT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ATK != other.ATK) return false;
      if (DEF != other.DEF) return false;
      if (SPD != other.SPD) return false;
      if (TSPD != other.TSPD) return false;
      if (MP != other.MP) return false;
      if (MAKT != other.MAKT) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ATK != 0) hash ^= ATK.GetHashCode();
      if (DEF != 0) hash ^= DEF.GetHashCode();
      if (SPD != 0F) hash ^= SPD.GetHashCode();
      if (TSPD != 0F) hash ^= TSPD.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (MAKT != 0) hash ^= MAKT.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ATK != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ATK);
      }
      if (DEF != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DEF);
      }
      if (SPD != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SPD);
      }
      if (MP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MP);
      }
      if (MAKT != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MAKT);
      }
      if (TSPD != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TSPD);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ATK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ATK);
      }
      if (DEF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DEF);
      }
      if (SPD != 0F) {
        size += 1 + 4;
      }
      if (TSPD != 0F) {
        size += 1 + 4;
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (MAKT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MAKT);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ability other) {
      if (other == null) {
        return;
      }
      if (other.ATK != 0) {
        ATK = other.ATK;
      }
      if (other.DEF != 0) {
        DEF = other.DEF;
      }
      if (other.SPD != 0F) {
        SPD = other.SPD;
      }
      if (other.TSPD != 0F) {
        TSPD = other.TSPD;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.MAKT != 0) {
        MAKT = other.MAKT;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ATK = input.ReadInt32();
            break;
          }
          case 16: {
            DEF = input.ReadInt32();
            break;
          }
          case 29: {
            SPD = input.ReadFloat();
            break;
          }
          case 32: {
            MP = input.ReadInt32();
            break;
          }
          case 40: {
            MAKT = input.ReadInt32();
            break;
          }
          case 53: {
            TSPD = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
