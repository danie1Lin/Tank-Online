// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Msg {
  public static partial class Rpc
  {
    static readonly string __ServiceName = "msg.Rpc";

    static readonly grpc::Marshaller<global::Msg.Input> __Marshaller_Input = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Msg.Input.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Msg.Position> __Marshaller_Position = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Msg.Position.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Msg.CallFuncInfo> __Marshaller_CallFuncInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Msg.CallFuncInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Msg.Error> __Marshaller_Error = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Msg.Error.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Msg.LoginInput> __Marshaller_LoginInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Msg.LoginInput.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Msg.UserInfo> __Marshaller_UserInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Msg.UserInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Msg.RegistInput> __Marshaller_RegistInput = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Msg.RegistInput.Parser.ParseFrom);

    static readonly grpc::Method<global::Msg.Input, global::Msg.Position> __Method_SyncPos = new grpc::Method<global::Msg.Input, global::Msg.Position>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SyncPos",
        __Marshaller_Input,
        __Marshaller_Position);

    static readonly grpc::Method<global::Msg.CallFuncInfo, global::Msg.CallFuncInfo> __Method_CallMethod = new grpc::Method<global::Msg.CallFuncInfo, global::Msg.CallFuncInfo>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "CallMethod",
        __Marshaller_CallFuncInfo,
        __Marshaller_CallFuncInfo);

    static readonly grpc::Method<global::Msg.Error, global::Msg.Error> __Method_ErrorPipLine = new grpc::Method<global::Msg.Error, global::Msg.Error>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ErrorPipLine",
        __Marshaller_Error,
        __Marshaller_Error);

    static readonly grpc::Method<global::Msg.LoginInput, global::Msg.UserInfo> __Method_Login = new grpc::Method<global::Msg.LoginInput, global::Msg.UserInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_LoginInput,
        __Marshaller_UserInfo);

    static readonly grpc::Method<global::Msg.RegistInput, global::Msg.Error> __Method_CreateAccount = new grpc::Method<global::Msg.RegistInput, global::Msg.Error>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount",
        __Marshaller_RegistInput,
        __Marshaller_Error);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Msg.MessageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Rpc</summary>
    public abstract partial class RpcBase
    {
      public virtual global::System.Threading.Tasks.Task SyncPos(grpc::IAsyncStreamReader<global::Msg.Input> requestStream, grpc::IServerStreamWriter<global::Msg.Position> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task CallMethod(grpc::IAsyncStreamReader<global::Msg.CallFuncInfo> requestStream, grpc::IServerStreamWriter<global::Msg.CallFuncInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ErrorPipLine(grpc::IAsyncStreamReader<global::Msg.Error> requestStream, grpc::IServerStreamWriter<global::Msg.Error> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Msg.UserInfo> Login(global::Msg.LoginInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Msg.Error> CreateAccount(global::Msg.RegistInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Rpc</summary>
    public partial class RpcClient : grpc::ClientBase<RpcClient>
    {
      /// <summary>Creates a new client for Rpc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RpcClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Rpc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RpcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RpcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RpcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::Msg.Input, global::Msg.Position> SyncPos(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SyncPos(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Msg.Input, global::Msg.Position> SyncPos(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SyncPos, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Msg.CallFuncInfo, global::Msg.CallFuncInfo> CallMethod(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallMethod(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Msg.CallFuncInfo, global::Msg.CallFuncInfo> CallMethod(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_CallMethod, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Msg.Error, global::Msg.Error> ErrorPipLine(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ErrorPipLine(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Msg.Error, global::Msg.Error> ErrorPipLine(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ErrorPipLine, null, options);
      }
      public virtual global::Msg.UserInfo Login(global::Msg.LoginInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Msg.UserInfo Login(global::Msg.LoginInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.UserInfo> LoginAsync(global::Msg.LoginInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.UserInfo> LoginAsync(global::Msg.LoginInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::Msg.Error CreateAccount(global::Msg.RegistInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Msg.Error CreateAccount(global::Msg.RegistInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Error> CreateAccountAsync(global::Msg.RegistInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Msg.Error> CreateAccountAsync(global::Msg.RegistInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RpcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RpcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RpcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SyncPos, serviceImpl.SyncPos)
          .AddMethod(__Method_CallMethod, serviceImpl.CallMethod)
          .AddMethod(__Method_ErrorPipLine, serviceImpl.ErrorPipLine)
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_CreateAccount, serviceImpl.CreateAccount).Build();
    }

  }
}
#endregion
